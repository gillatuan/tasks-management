# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthRegisterInput {
  address: String!
  email: String!
  password: String!
  phone: String!
}

input CreatePermissionInput {
  apiPath: String!
  method: String!
  module: String!
  name: String!
}

input FilterDto {
  isActive: Boolean
  s: String
}

type FindAllType {
  meta: PaginationDto!
  result: [UserType!]!
}

type JWTAccessToken {
  accessToken: String!
  user: UserPayload!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  authRegister(authRegisterInput: AuthRegisterInput!): UserType!
  create(createPermissionInput: CreatePermissionInput!): PermissionType!
  login(loginInput: LoginInput!): JWTAccessToken!
  register(registerUserInput: RegisterUserInput!): UserType!
  removeUser(id: String!): String!
  updateUser(id: String!, password: String!): String!
}

type PaginationDto {
  current: Float!
  pageSize: Float!
  pages: Float!
  total: Float!
}

type PermissionType {
  apiPath: String!
  method: String!
  module: String!
  name: String!
}

type Query {
  findAll(current: String!, limit: String!, qs: String!): FindAllType
  findByEmail(email: String!): UserType!
  findOne(id: String!): UserType!
  helloo: String!
  searchTerms(filterDto: FilterDto!): [UserType!]!
}

input RegisterUserInput {
  avatar: String!
  password: String!
  role: String!
}

type UserPayload {
  email: String!
  id: String!
  role: String!
}

type UserType {
  address: String!
  avatar: String!
  email: String!
  id: String!
  isActive: Boolean!
  phone: String!
  role: String!
}