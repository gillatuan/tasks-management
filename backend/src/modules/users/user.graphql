scalar Date

enum RoleEnum {
  Admin
  Member
}

type User {
  _id: String!
  id: String!
  email: String!
  password: String
  providerId: String
  phone: String!
  address: String!
  image: String!
  role: RoleEnum
  isActive: Boolean
  codeId: String
  codeExpired: Date
}

input RegisterUserInput {
  id: String
  email: String
  password: String
  phone: String
  address: String
  image: String
  role: RoleEnum
}
input UpdateUserInput {
  id: String
  email: String
  phone: String
  address: String
  image: String
}

type FilterDto {
  isActive: Boolean
  s: String
}

type Query {
  helloo: String!
  findAll: [User!]
  findOne(id: String): User!
}

type Mutation {
  register(registerUserInput: RegisterUserInput!): User
  removeUser(id: String): String
  updateUser(id: String, updateUserInput: UpdateUserInput): String
}